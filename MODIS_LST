{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is a small geocomputational scripting exercise for an applicaztion at iDiv.\n",
    "\n",
    "*(cc) jackisch@kit.edu 2018*\n",
    "\n",
    "----\n",
    "\n",
    "## Monthly means of MODIS Land Surface Temperature\n",
    "\n",
    "*Task:* Derive global MODIS/Terra and MODIS/Aqua Land Surface Temperature maps for monthly means and export as GeoTIFF. Discard any pixels where the quality indicator >0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "#preamble\n",
    "%pylab inline\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import requests\n",
    "from osgeo import gdal\n",
    "from bs4 import BeautifulSoup\n",
    "from pyhdf import SD\n",
    "\n",
    "#import seaborn as sns\n",
    "#sns.set_style('whitegrid', {'grid.linestyle': u'--'})\n",
    "matplotlib.rc('pdf', fonttype=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import rasterio as rst\n",
    "from rasterio.merge import merge\n",
    "from rasterio.plot import show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os.path\n",
    "import multiprocessing\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Functions to load and process MODIS data tile-wise and to mosaic them afterwards\n",
    "The following sequence of functions does the requested analysis and data collection. The processing has been chosen to happen tile-wise for easier parallelisation at the level of one individual month."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get a series of folders in modis product with timestamp index:\n",
    "def listFD(url, ext=''):\n",
    "    page = requests.get(url).text\n",
    "    soup = BeautifulSoup(page, 'html.parser')\n",
    "    return [url + '/' + node.get('href') for node in soup.find_all('a') if node.get('href').endswith(ext)]\n",
    "\n",
    "def get_modis_folder_cont(d_mod):\n",
    "    #get all folders in https repository:\n",
    "    f_mod = listFD(d_mod,'')[7:] #this is specific for current folder structure. if changed, a dynamic index check is required\n",
    "\n",
    "    #create time index for retrieval of records in specific time span:\n",
    "    tsx= pd.to_datetime(f_mod[0].split('//')[-1][:-1],format='%Y.%m.%d')\n",
    "    ts_mod = np.repeat(tsx,len(f_mod))\n",
    "\n",
    "    for i in np.arange(len(f_mod)):\n",
    "        ts_mod[i] = pd.to_datetime(f_mod[i].split('//')[-1][:-1],format='%Y.%m.%d')\n",
    "\n",
    "    return pd.Series(f_mod,index=ts_mod)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#MODIS file repository addresses\n",
    "d_modA2 = 'https://e4ftl01.cr.usgs.gov/MOLT/MOD11A2.006/'\n",
    "d_mydA2 = 'https://e4ftl01.cr.usgs.gov/MOLA/MYD11A2.006/'\n",
    "\n",
    "#get folders with timestamp\n",
    "ds_modA2 = get_modis_folder_cont(d_modA2)\n",
    "ds_mydA2 = get_modis_folder_cont(d_mydA2)\n",
    "\n",
    "#get files for specific month\n",
    "fi_terra = listFD(ds_modA2[ds_modA2.index[(ds_modA2.index.year == 2002) & (ds_modA2.index.month == 8)]].values[0],'hdf')\n",
    "fi_aqua = listFD(ds_mydA2[ds_mydA2.index[(ds_mydA2.index.year == 2002) & (ds_mydA2.index.month == 8)]].values[0],'hdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#get tile files in month\n",
    "def get_tile_files(fo,yr,mo):\n",
    "    '''get all files of a MODIS product folder for a given year and month\n",
    "    fo is the folder\n",
    "    yr is the year as int\n",
    "    mo is the month as int\n",
    "    a Pandas Series with all tile files is returned'''\n",
    "    fi = []\n",
    "    for foo in fo[fo.index[(fo.index.year == yr) & (fo.index.month == mo)]].values:\n",
    "        fi = np.append(fi, listFD(foo,'hdf'))\n",
    "\n",
    "    # get tile index\n",
    "    dummy = np.zeros(len(fi))\n",
    "    for i in np.arange(len(fi)):\n",
    "        dummy[i] = int(fi[i].split('.')[8][1:3])*100 + int(fi[i].split('.')[8][4:])\n",
    "\n",
    "    return pd.Series(fi,index=dummy.astype(int))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#credentials for usgs https server (ftp server was shut down recently)\n",
    "username = 'cojack'\n",
    "password = 'RMn-GE9-D8z-qaq'\n",
    "\n",
    "#download files to tmp folder:\n",
    "def download_fi(path_series,tmpf='tmp/'):\n",
    "    '''download hdf files from USGS https server to tmp folder\n",
    "    path_series is a Pandas Series of the file paths in the repository\n",
    "    tmpf indicates the path to store the files\n",
    "    an array of the stored paths is returned'''\n",
    "    path_array = path_series.values.astype(str)\n",
    "    store_path = path_array\n",
    "    k=0\n",
    "    with requests.Session() as session:\n",
    "        session.auth = (username, password)\n",
    "        for url in path_array:\n",
    "            fi_n = tmpf+str(url.split('/')[-1])\n",
    "            if os.path.isfile(fi_n)==False:\n",
    "                r1 = session.request('get', url)\n",
    "                r = session.get(r1.url, auth=(username, password))\n",
    "                with open(fi_n, \"wb\") as code:\n",
    "                    code.write(r.content)\n",
    "            store_path[k]=fi_n\n",
    "            k+=1\n",
    "            #test data file\n",
    "            try:\n",
    "                gdal_dataset = gdal.Open(fi_n)\n",
    "                subsets = gdal_dataset.GetSubDatasets()\n",
    "                gdal_dataset=None\n",
    "            except:\n",
    "                #try to reload data file once\n",
    "                r = session.get(r1.url, auth=(username, password))\n",
    "                with open(fi_n, \"wb\") as code:\n",
    "                    code.write(r.content)\n",
    "                try:\n",
    "                    gdal_dataset = gdal.Open(fi_n)\n",
    "                    subsets = gdal_dataset.GetSubDatasets()\n",
    "                    gdal_dataset=None\n",
    "                except:\n",
    "                    print(fi_n + ' repeatedly failed to load and open properly')\n",
    "            \n",
    "    return store_path\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "def save_raster (raster_data, output_name, dataset, NaN_Value):\n",
    "    '''save a np.array using GDAL to a GeoTiff file\n",
    "    raster_data is a np.array\n",
    "    output_name is the file to store\n",
    "    dataset is a GDAL-accesible dataset to collect the projection and geotransform from\n",
    "    NaN_Value defines what is placed\n",
    "    '''\n",
    "    # Open the reference dataset\n",
    "    g = (dataset)\n",
    "    # Get the Geotransform vector\n",
    "    geo_transform = g.GetGeoTransform()\n",
    "    x_size = g.RasterXSize # Raster xsize\n",
    "    y_size = g.RasterYSize # Raster ysize\n",
    "    srs = 'PROJCS[\"WGS 84 / Pseudo-Mercator\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Mercator_1SP\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"scale_factor\",1],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],EXTENSION[\"PROJ4\",\"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs\"],AUTHORITY[\"EPSG\",\"3857\"]]'\n",
    "    #srs = g.GetProjectionRef () # Projection\n",
    "    #raster_data = g.ReadAsArray().astype(float)\n",
    "    NaN_rast = NaN_Value\n",
    "    # raster_data[raster_data == NaN_rast] = 'NaN'\n",
    "    raster_data[raster_data == NaN_rast] = np.nan\n",
    "    # Need a driver object. By default, we use GeoTIFF\n",
    "    dst_options = ['COMPRESS=LZW']\n",
    "    driver = gdal.GetDriverByName(\"GTiff\")\n",
    "    dataset_out = driver.Create(output_name, x_size, y_size, 1, gdal.GDT_Float32, dst_options)\n",
    "    dataset_out.SetGeoTransform(geo_transform)\n",
    "    dataset_out.SetProjection(srs)\n",
    "    dataset_out.GetRasterBand(1).WriteArray(raster_data.astype(np.float32))\n",
    "    dataset_out.FlushCache()\n",
    "    \n",
    "    return\n",
    "\n",
    "def save_raster_comp (raster_data, bands, output_name, dataset, NaN_Value):\n",
    "    '''save a np.array using GDAL to a GeoTiff file\n",
    "    raster_data is a np.array\n",
    "    output_name is the file to store\n",
    "    dataset is a GDAL-accesible dataset to collect the projection and geotransform from\n",
    "    NaN_Value defines what is placed\n",
    "    '''\n",
    "    # Open the reference dataset\n",
    "    g = (dataset)\n",
    "    # Get the Geotransform vector\n",
    "    geo_transform = g.GetGeoTransform()\n",
    "    x_size = g.RasterXSize # Raster xsize\n",
    "    y_size = g.RasterYSize # Raster ysize\n",
    "    srs = 'PROJCS[\"WGS 84 / Pseudo-Mercator\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Mercator_1SP\"],PARAMETER[\"central_meridian\",0],PARAMETER[\"scale_factor\",1],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],EXTENSION[\"PROJ4\",\"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs\"],AUTHORITY[\"EPSG\",\"3857\"]]'\n",
    "    #srs = g.GetProjectionRef () # Projection\n",
    "    #raster_data = g.ReadAsArray().astype(float)\n",
    "    NaN_rast = NaN_Value\n",
    "    # raster_data[raster_data == NaN_rast] = 'NaN'\n",
    "    # Need a driver object. By default, we use GeoTIFF\n",
    "    dst_options = ['COMPRESS=LZW']\n",
    "    driver = gdal.GetDriverByName(\"GTiff\")\n",
    "    dataset_out = driver.Create(output_name, x_size, y_size, bands, gdal.GDT_Float32, dst_options)\n",
    "    dataset_out.SetGeoTransform(geo_transform)\n",
    "    dataset_out.SetProjection(srs)\n",
    "    for b in np.arange(bands):\n",
    "        rst = raster_data[:,:,b]\n",
    "        rst[rst == NaN_rast] = np.nan\n",
    "        dataset_out.GetRasterBand(b+1).WriteArray(rst.astype(np.float32))\n",
    "    dataset_out.FlushCache()\n",
    "    \n",
    "    return\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "#read and process set of terra and aqua tiles\n",
    "#store to GeoTiff\n",
    "    \n",
    "def tile_process(fi_terra,fi_aqua,ti):\n",
    "    '''Processing of one tile over one month\n",
    "    fi_terra and fi_aqua are the respective file arrays\n",
    "    ti is the tile index\n",
    "    \n",
    "    This function calls to download the hdf files. \n",
    "    It then extracts the required LST data and QC indicees.\n",
    "    A np.array is filled with the requested data.\n",
    "    The mean values for day and night are stored to two GeoTiff files.'''\n",
    "    \n",
    "    store_path_terr = download_fi(fi_terra[ti])\n",
    "    store_path_aqua = download_fi(fi_aqua[ti])\n",
    "    \n",
    "    # create empty arrays\n",
    "    dt_arr = np.zeros((1200,1200,len(store_path_terr)))\n",
    "    nt_arr = np.zeros((1200,1200,len(store_path_terr)))\n",
    "    da_arr = np.zeros((1200,1200,len(store_path_terr)))\n",
    "    na_arr = np.zeros((1200,1200,len(store_path_terr)))\n",
    "\n",
    "\n",
    "    # get data from terrestial LST\n",
    "    for i in np.arange(len(store_path_terr)):\n",
    "        \n",
    "        try:\n",
    "            # load layers from hdf4 file\n",
    "            gdal_dataset = gdal.Open(store_path_terr[i])\n",
    "            subsets = gdal_dataset.GetSubDatasets()\n",
    "            dataset_LSTd = gdal.Open(subsets[0][0])\n",
    "            qc_LSTd = gdal.Open(subsets[1][0])\n",
    "            dataset_LSTn = gdal.Open(subsets[4][0])\n",
    "            qc_LSTn = gdal.Open(subsets[5][0])\n",
    "        \n",
    "            # populate array with data where the criterion (QC = 0) is met\n",
    "            dummy = dataset_LSTd.ReadAsArray().astype(float)\n",
    "            dummy[qc_LSTd.ReadAsArray()>0] = np.nan\n",
    "            dt_arr[:,:,i] = dummy\n",
    "            dummy = dataset_LSTn.ReadAsArray().astype(float)\n",
    "            dummy[qc_LSTn.ReadAsArray()>0] = np.nan\n",
    "            nt_arr[:,:,i] = dummy\n",
    "        except:\n",
    "            print('Error while reading '+store_path_terr[i]+'.')\n",
    "            print('Tile data not considered.')\n",
    "            dt_arr[:,:,i] = np.nan\n",
    "            nt_arr[:,:,i] = np.nan\n",
    "\n",
    "    # get data from aquatic LST\n",
    "    for i in np.arange(len(store_path_aqua)):\n",
    "        \n",
    "        try:\n",
    "            # load layers from hdf4 file\n",
    "            gdal_dataset = gdal.Open(store_path_aqua[i])\n",
    "            subsets = gdal_dataset.GetSubDatasets()\n",
    "            dataset_LSTd = gdal.Open(subsets[0][0])\n",
    "            qc_LSTd = gdal.Open(subsets[1][0])\n",
    "            dataset_LSTn = gdal.Open(subsets[4][0])\n",
    "            qc_LSTn = gdal.Open(subsets[5][0])\n",
    "            \n",
    "            # populate array with data where the criterion (QC = 0) is met\n",
    "            dummy = dataset_LSTd.ReadAsArray().astype(float)\n",
    "            dummy[qc_LSTd.ReadAsArray()>0] = np.nan\n",
    "            da_arr[:,:,i] = dummy\n",
    "            dummy = dataset_LSTn.ReadAsArray().astype(float)\n",
    "            dummy[qc_LSTn.ReadAsArray()>0] = np.nan\n",
    "            na_arr[:,:,i] = dummy\n",
    "        except:\n",
    "            print('Error while reading '+store_path_aqua[i]+'.')\n",
    "            print('Tile data not considered.')\n",
    "            da_arr[:,:,i] = np.nan\n",
    "            na_arr[:,:,i] = np.nan\n",
    "\n",
    "    # calculate mean of LST records in time window\n",
    "    d_arr_out = np.zeros((1200,1200,2))\n",
    "    n_arr_out = np.zeros((1200,1200,2))\n",
    "    d_arr_out[:,:,0] = np.nanmean(dt_arr,axis=2)\n",
    "    d_arr_out[:,:,1] = np.nanmean(da_arr,axis=2)\n",
    "    n_arr_out[:,:,0] = np.nanmean(nt_arr,axis=2)\n",
    "    n_arr_out[:,:,1] = np.nanmean(na_arr,axis=2)\n",
    "\n",
    "    #save_raster (d_arr_out, 2, 'res/'+str(ti).zfill(4)+'_d.tif', dataset_LSTd, 0)\n",
    "    #save_raster (n_arr_out, 2, 'res/'+str(ti).zfill(4)+'_n.tif', dataset_LSTn, 0)\n",
    "    save_raster_comp (d_arr_out,2, 'res/'+str(ti).zfill(4)+'_d.tif', dataset_LSTd, 0)\n",
    "    save_raster_comp (n_arr_out,2, 'res/'+str(ti).zfill(4)+'_n.tif', dataset_LSTd, 0)\n",
    "    \n",
    "    return ['res/'+str(ti).zfill(4)+'_d.tif', 'res/'+str(ti).zfill(4)+'_n.tif']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mosaic_Gtif(tis,out_fi='mos.tif'):\n",
    "    '''Mosaic GeoTiff files\n",
    "    tis is a list of GeoTiff files to be stitched together\n",
    "    out_fi is the name of the output GeoTiff file\n",
    "    '''\n",
    "    \n",
    "    mos_fi = tis#['test1.tif','test2.tif']\n",
    "    fi_to_mosaic = []\n",
    "    for fi in mos_fi:\n",
    "        sx = rst.open(fi)\n",
    "        fi_to_mosaic.append(sx)\n",
    "    \n",
    "    mosaic, out_trans = merge(fi_to_mosaic)\n",
    "    show(mosaic)\n",
    "\n",
    "    # write mosaic to file\n",
    "    out_meta = sx.meta.copy()\n",
    "    out_meta.update({\"driver\": \"GTiff\",\"height\": mosaic.shape[1],\"width\": mosaic.shape[2],\"transform\": out_trans,\"compress\": \"LZW\",\"crs\": \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\"})\n",
    "    #'crs': '+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'\n",
    "    #\"crs\": \"+proj=utm +zone=35 +ellps=GRS80 +units=m +no_defs \"\n",
    "    \n",
    "    with rst.open(out_fi, \"w\", **out_meta) as dest:\n",
    "        dest.write(mosaic)\n",
    "        \n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>istr</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>h08v00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>h09v00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>h10v00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>h07v01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>h08v01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       istr\n",
       "0          \n",
       "8    h08v00\n",
       "9    h09v00\n",
       "10   h10v00\n",
       "107  h07v01\n",
       "108  h08v01"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#identifiers of tiles which contain land (317)\n",
    "land_tiles = pd.read_csv('land_tiles.txt',header=None,index_col=0)\n",
    "land_tiles.columns = ['istr']\n",
    "land_tiles.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Actually run the analysis for a specific month and year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "yr = 2004\n",
    "mo = 8\n",
    "\n",
    "fi_terra = get_tile_files(ds_modA2,yr,mo)\n",
    "fi_aqua = get_tile_files(ds_mydA2,yr,mo)\n",
    "\n",
    "def wrap_tile_process(ti):\n",
    "    #if os.path.isfile('./res/'+str(ti).zfill(4)+'_d.tif')==False:\n",
    "    try:\n",
    "        tile_process(fi_terra,fi_aqua,ti)\n",
    "    except:\n",
    "        print(ti+' could not be processed')\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/cojack/miniconda3/lib/python2.7/site-packages/ipykernel_launcher.py:77: RuntimeWarning: Mean of empty slice\n",
      "/Users/cojack/miniconda3/lib/python2.7/site-packages/ipykernel_launcher.py:77: RuntimeWarning: Mean of empty slice\n",
      "/Users/cojack/miniconda3/lib/python2.7/site-packages/ipykernel_launcher.py:77: RuntimeWarning: Mean of empty slice\n",
      "/Users/cojack/miniconda3/lib/python2.7/site-packages/ipykernel_launcher.py:78: RuntimeWarning: Mean of empty slice\n",
      "/Users/cojack/miniconda3/lib/python2.7/site-packages/ipykernel_launcher.py:78: RuntimeWarning: Mean of empty slice\n",
      "/Users/cojack/miniconda3/lib/python2.7/site-packages/ipykernel_launcher.py:79: RuntimeWarning: Mean of empty slice\n",
      "/Users/cojack/miniconda3/lib/python2.7/site-packages/ipykernel_launcher.py:79: RuntimeWarning: Mean of empty slice\n",
      "/Users/cojack/miniconda3/lib/python2.7/site-packages/ipykernel_launcher.py:78: RuntimeWarning: Mean of empty slice\n",
      "/Users/cojack/miniconda3/lib/python2.7/site-packages/ipykernel_launcher.py:80: RuntimeWarning: Mean of empty slice\n",
      "/Users/cojack/miniconda3/lib/python2.7/site-packages/ipykernel_launcher.py:79: RuntimeWarning: Mean of empty slice\n",
      "/Users/cojack/miniconda3/lib/python2.7/site-packages/ipykernel_launcher.py:80: RuntimeWarning: Mean of empty slice\n",
      "/Users/cojack/miniconda3/lib/python2.7/site-packages/ipykernel_launcher.py:80: RuntimeWarning: Mean of empty slice\n",
      "/Users/cojack/miniconda3/lib/python2.7/site-packages/ipykernel_launcher.py:77: RuntimeWarning: Mean of empty slice\n",
      "/Users/cojack/miniconda3/lib/python2.7/site-packages/ipykernel_launcher.py:78: RuntimeWarning: Mean of empty slice\n",
      "/Users/cojack/miniconda3/lib/python2.7/site-packages/ipykernel_launcher.py:79: RuntimeWarning: Mean of empty slice\n",
      "/Users/cojack/miniconda3/lib/python2.7/site-packages/ipykernel_launcher.py:80: RuntimeWarning: Mean of empty slice\n"
     ]
    }
   ],
   "source": [
    "#parallel version:\n",
    "try:\n",
    "    pool = multiprocessing.Pool()\n",
    "    results = pool.map(wrap_tile_process, np.unique(fi_terra.index).tolist())\n",
    "except:\n",
    "    pool.close()\n",
    "pool.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#sequential version:\n",
    "#NO NEED TO RUN IF PARALLEL VERSION WORKS\n",
    "for ti in np.unique(fi_terra.index):\n",
    "    #if os.path.isfile('./res/'+str(ti).zfill(4)+'_d.tif')==False:\n",
    "    try:\n",
    "        tile_process(fi_terra,fi_aqua,ti)\n",
    "    except:\n",
    "        print('Tile '+str(ti)+' could not be processed')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generate mosaic output\n",
    "(this uses all apparent ouput tiles)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYcAAADBCAYAAAAkaHy7AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAIABJREFUeJzsvXuQXNV97/tZa/Xu3up5aDRCQjwEeo0khBSZIMvCXGJCkFEoc+GSQy5RXWIuKfv6OPZ1juNc7JRjn9gkNhXiUxznOC77HBUOp3SUkHCwcXEhIgTCJRCMjLGEXjMSA+IhJEYazaOnu3evte4fa+81PdJIGo1Gmtf6VE3NzJ7d3Xt2z6zf+r2+P2GtJRAIBAKBeuR4X0AgEAgEJh7BOAQCgUDgBIJxCAQCgcAJBOMQCAQCgRMIxiEQCAQCJxCMQyAQCAROYMIYByHEBiHEHiFEhxDiy+N9PYFAIDCdEROhz0EIoYC9wHrgbeBnwO9Ya3eO64UFAoHANGWieA5rgQ5r7X5rbRXYAtw6ztcUCAQC05aJYhwuAQ7Uff92eiwQCAQC40BuvC8gRQxz7IR4lxDi08CnARTq6iLN5/q6AoFxpXCF4PLiwvG+jCHs3bZ/vC8hcBb0cvQDa+2c0503UYzD28D8uu8vBd49/iRr7Q+AHwA0i1b7EfEb5+fqAoFxYuvORwD43M838le/unmcr8axXt4x3pcQOAuetn//5kjOmyhhpZ8BbUKIhUKIPHAn8JNxvqZAYMLQqCoA/OEvfpv/+9XfGeerCUwHJoTnYK2tCSE+BzwFKGCTtfb1cb6sQGDC8O3V/8Dnfr6RWVEVgC+/9ltoJH+x+pFhz//czzdSkDX+8kN/dz4vMzCFmCieA9baJ6y1S621i621fzbe1xMITCT+6LU7+Ktf3Yy2ksQoIqmJhObLr/3WsOf/1a9uDoYhcFZMCM8hEAicmr9Y/Qhffu23KJkCjapCYhQaSSQ0f/zL2/15xgqksPz5rzx6Wu8iEDgVE8ZzCAQCw/P17a7lRwpLJDQVk+Pbq/9hyKKvhCES2p9z345PUJA1FIY/2X7bCc9Zb1ACgeGYEB3SoyFUKwWmA1vN0F3/l1/7Lb69+h/441/eTsU4x78ga8QyoWwi/vxXHuW+HZ8gsYqKydGoKhgEZRNhrKCoqnxt5eN8ffutGARFWeVYbQaR1D5cdTQpnrIyKlQrTW6etn+/zVq75nTnhbBSADhxETrXhAXmzPmj1+6gSbmE9J//yqNDfnb/zg18beXjfOv1mwGJEoaiqlIyeSKhiWWCti5Q8I0dtxAJS8XmKJm8NyDFnDMUM1TCH//ydv+YP131Y2DQg9lqfjyi6w3v8eQmGIdAYILzJ9tvIzGKpnTXX8/9OzfwTmUW//mqJ/nGjluQSI7Wivzlh/6Or2+/lSZVRgpDxUTEMgEgsQqAgqhh0v5TiUWmBiXzLACKqsJ9Oz5BxeaQuPDVfTs+gUEQCe2f6/jrCkx+QlgpAIy95/DgrhspmTxfufIJf+zr229FCcNMNcBPr5w1pq83Vbnul2W0dZ5AtvNvUmXKJuKrK3+aGgTLV1f+FHCGpCirREJTNhGJVRRVhcTkUMJQNpH/vt4wVGyOoqySWOUX/EZVxljp38P7d27AWOmvo6gq9OmYRlWmYiIKMqEoq3xm2XNA8BwmKiMNK4WEdGBM+f6ej/Hgrhv5whVPDzEM33r9ZppUmVm5fnp1PI5XOPn401U/JrHKf84W/a9vv5WvrXyckslz/84N3LfjE343n93jWCbcu+JJEqvQ1lU3lXQBwJXFWkXF5pipBpDCUJAJkdAURI2SLlBIvY1vvX6zP6dJlWlSZRKrvAGRwmBSo/HAzpv44Z7rxudmBcaMEFYKnDUP7rqRmaqfss3zmWXP8Y0dt/DgrhuJRI1jukhiFZLBHWfgzLhvxyf45qqf8ifbb+OdciuLi4cpqgr3rniSr2+/lT//lR/zJ9tvoyBqPu8gU2kybSX379xALAfvfVbZhBn8vlfHREJTVBWMcIt9TIKxkvt2fIKZuTKd5QuYm+8hEjUApDB8fvkz3L9zgzc6jarMBbkeEhuWlslOCCsFgLENKz2w8yYioTmmZyCxRLKGsZKZqkTZRhytNfDS6mjMXm8qk4WVDIKCcFVJWZK5KKtoBEdrDURC87WVj/OdXev54hVbfXipPiSVWDVoANLvwS3yickRSbfoZ55AJDQKi0a48FQadgLSnxkSm6MgE4wV6DQQEYsEjeQfrpg7PjctcEpCWClwTnlg501Dvv/W6zfzrddv5ju71lMyeTSCr618nK6kgZIuoK2kbKPUSAyM01VPPhpVmaKquDxCungXZIIUBo1AYWlUZcB5GMdqRe7fucHf4+wxkay5XINVVEyERqBTIwD4ZHUkNAAK60JRqWFQWEomj0o9kj4do5EUZcUbHYUhFgllG5FPvYvA5CX4foFRUZAJf7L9NmaqAb+bTKxCWsMHSSMFmfDAzpuYHxu/uFRM5M8LjIxIaJ9HqJgI0sW8pAt+Qc+SzJX0M4BGIIVBYSmmCWONoEmVvVEp5kqUTN57BNoqTJqXkMKAlT6PoNPqJCkMOjUGJZMnEe4xn1/xDN/bfb03FNUQVpr0BM8hMGIe3HUjD+y8iQd33cjRWgMFUaNXx3yQNPKVK5/gWG0GRVllQfyBT4KWdMFVuKSVMdpKn+QMjIxsR+7CN9KFgNIdPrhdf+aRGSv97h4YNCpDns9SlM6Y1HsKsagRCc1MVRrmGqw3Utn7mb2OFIbv7FpP2UZoJH06PuE1A5OPYN4Dp+U7u9ZjrKRXN7gyyrS65QtXPM0DO2/yu9WL8sd4qzKbv1j9CA/svAkphI9nZxRVZcjiFTg9JVPw4Z9CXa9CFuopyqo/Nzsv2/FnC3pBJpCGkdzjXCVSFirKqo00gpIpuPcofS6ZPl/J5P1zR0I7g58+Z+YxZJ/DBmDyE4zDBOV8dyyfjAd33QhpSCGWCV9a8dSQn9d/L4WhZiQP7LyJkslT0nlm5gZQwrjqF1HzMezAyFAYv7uv360rUUOm97WkCz6fEAntE8oZ2aKtsD7BXJSVNGdQrTMkNWQaTMgMgMKgkRgsmS9QsnnvCYIzVInJgRx8LWkHX/98MVb/M6E/wxHCSoHT8sUrtp7Qt3Cy85pzZXp1TEEmzIr6fWNUluCsDzEFRkZWOuryDzUiUfM7c5dTqHiDm3kRsah5Q1Jf2fSFK572xzNj4rwJgxTWh7AiUUsrmtz+MTNEkagxU5W4d8WT3qgYK4lkjdg/RnkvIzB5CcYhcAL379zgv/7CFU+P6DF/+Ivf9iWssUx8PDszCl9a8ZT/yBaVwOnRSDTSN6dlyquxqNIgK77kNOuKzhrTpDB8acVTvqopez++s2u9q1RK5b4HiwlybscvBkN+7jUHq45c93SOXhPz4K4bKcoq5bQzOqO+BDYwuQlhpQDf2bWexCruXfEkgP98Jo+flSv4hUZbiUxDGFIYvpQamPt2fAKAWOqTPlfgRLLwDjhjoTCUjKtWynoKACppdZESCQjXrf7FK57ju7tvIIEhCeQsVJXNfzCp55AXNcppMjn7mbYMySk0ybL3KJQYGj4aLGsNxmGyE4xDgC9esXVUj3tw142pVEPR72q1lcRpHX7mdTilUCiqZMhuNXB6FIZ8WkWUWEVEjcTmKMoKZetCN7GootKQUK+J04a1Cnmh2dKxhgY5KJeRGZLsOcsmokFW6DcFlDBU657b5xuspEmWKZn0eRgMDWaGQIkaZZvzeQ0pzn/OITC2BOMQGBX37fgEkcxhrPTVSr06pqgqPkn9nV3rAZBpLbyxks9fsXVI2CpwajKDW5QVFIaqVX52Q17UaFElqmmyOVaJ37nn0/CexGBEmnCWml4TI1PPY17+GF00opG0qJI3KgDGSFpVHwdrLUSihkb6Hof6sGBW8dQkXRVbJLQzEpNUeSEwSDAOgVFT0gUnk5EOi4mEJq6LUWfdsk3SdfBmoYj6Gv3AqYnlYHK4SQ3Qq2e4yi/l7m2Pjv05eaFRkeFQrdkfA9JKsQST5hkAWnN9dOlG5qgeAI5oZySwgwbpiG4ESI87TyB7/PvVFi7NHyFJDYJG+vc5EjXKNvQ5THZCZjBwxnxn13q+uvKnKGH46sqfkljFN1c9xtzIibJt2nstP9xzHZHQtKo+F7dOk6rf3X1DSEifAZFwYSQpDP2mQFE6XaQ4rUpqSCvB6rkkOuK9CYC80Jj0X71JDhCLhMTmaJAVyjYiQdGkBtJKKBe+yrwTYwUKp8S6OH+IhlQu48KoJ01qO/VWJ5kifdd2fe9FYHIS/ksDI+aBnTfxrddvpmIivrf7embl+vnOrvXMzffw0N5raJAViukHpMnTtPrl88ufoS+VkT6+VyJwcnr1DBQmXail36knNkeTHOBwrYlYVomFW5RbpOtuVljXsWzdAl4U7j3JqpK0FW5hT/MImbHIFFudrpJECosUlrerrRyszaRV9TE/OgI4z1AKywVRL0Xpqqe6dRGNDB3SU4AQVpqgjFUjzlg0Bt2/cwMlXeBPVz3FD/dcRywTerVLfMYioUWVyAtN1SoM0i84gEt0Yvj+no/RqJxg23d33wDMPuvrmg4o4ZLCDbJKf6rGGokaBolBMifXSywSFJaqdZ5GAy6/kJAqqKLd2FAqJEIRWUmc7gtbVZ8/L7G5dME3NMgK1bR09UDSykXRUQBfJTU/3wW497dbF2mQFWKR0CTLaVhpYvY5hAa3kRM8h8BpuXfFk1xe+IDv7b4egO60OumLV2ylNddHUVaIZcLsXB9zcj0+9pwXNV/x0qL6MVbQmusLOYczoJguuolVKGF9PF+nE9ma5AC9ZgaxSGhO73uXbiSWCXNUr/coXH/CDCK0b3JTWB9uikWSmhuDSauR3GI/wKr4AM2qjErDg/2mwBzV470RZ0jcPnNOrodLoqPMVn3jcLcCY0nwHAIn5bu7b2Be7hi9JmZR/hAlU+CtZDZzcj28n7Tw+P5VtEhNyRZoTReDzGuoH2upMHRrN3PgcK1p3H6fyYixkvqi0GwxdwZC+JCRrNNBmq36XF5HQIOoUhVu9OdslXip7oh6Az1oDEyaR5DpHIh+44QTi6JCpFyCW2H5t9ISLs13cUnuKP02T1etkR4zwyei65vnApOT4DkEhmXT3muJRcJs1cf8qItuXWRfda6Pfzcpl9hskBXmqB6MlXTroj/Woko+yalSeQadhkFCg9TIkcKwse1lL3Fx++JXuXPJKzSkfQxKGB/KS6zisG6iM7mAzuQCdlYu8VpWXigPVwGVT8td8yL1JFJjITHsrlxMLF2oqkWVKIoKDbJCr57BbNmPxLB6xps0yAq/KF/GO0krC/If0CwHaEkVXXvNjHG7Z4GxIRiHwBCySqMF0QfMyfWwu3IR+6oX8mZ1DgvyhymZAsd0gw93ZIlPgBZVosfE9JsC/aaQ1uK7ElcljB8AE8JKIyfrVr5zyStEaVNbdjwSmn5ToMcMzuTu1YOL8vL8e14mQ+HUWDurc1Ixv5p/XNlGQwzGlYV3KJvIq62WbcTPBhbRokp0myJzVR9NskwsEpYX3mN54V2MlSyIPqAoKvSaGb5EdrxwgpGBsyGElQKeLR1rmJdzCcVDuonZqo9YJlycO0osE9or89AIVsUH/MJ0WDe7hUAYyqZQV/3ikpxlK6naHMYKEptjTq4Hl/+cNX6/6CQiX2dI71iyzX+9se1lNu29Fm0lDbLCId3EJen7VNbOoLiBPcobBiUSt/DbyBcSADSJAd917UeEpu9f5kF8eMZ+NJLO6gV0Vi9gUf6Qy2GIGsX0tco2olmW0w3B+ISVNu29lnuWvjBiTbDAyQnGIcBDe6+hbPMszfcCLjmplPt6QfQB3abIu9VZLMgf9o1tsUiIVTI4rB44XGt2i0TdEBltBQ2ywuFak+/m7a+rZgqcmo1tL5/0Z/csfQFwC+L71ZmUTUSzKjMn18PBpIWdlUuo2hxXx50+lFe2OefdiTzzVI8fBdoiByinSeV3a7OYo3qIRY0u3UC3KdKtG4hF1YWhcn28OrCAi6KjlEwT83LHUuNjKdscz/Ut56am7ef+5pzknjy67yoOJjORwvKZZc+Ny3VMBUJYaZqzuX0tc3O9tKj+VK1T0J/q9cciocfEFEWF+VEXic1xsNbia+V70xBSyRR4N3GeQLmuvj3zHnp1TIsq+UoYRdDdGSkP7b3mtOfcs/QFFhYOYXB5n3eSVi+Ilxc1tlcu5fXqxYAL6V2S605nejtjoHFfN8kq79Rm0ar62F6ez7byAg7WZvJuMouKifh5/wJ2DFzKm9ULWFPcT4sq0aJKbC/Pp2xzFNIQ4r+buY3iOA77uX3xqyQ2x2eWPecr7AJnzll5DkKITqAX0EDNWrtGCNEK/C2wAOgEfttae1QIIYAHgZuBEnC3tfbn6fN8Evhq+rT3WWt/dDbXFTg9j3RcDUCrGiAvNBfnj9Gbdrnm0fyyMp/Zqo9eE7Mg+oDt5fnMz3cxW/XRb/Ouvt0UyQtNuU7QrR5tJZHUbm6xFRjkEK8icHqalStPfXTfVXTrYqphFNEkB+jWRe5e+qI/NxKaI7VGVs94k14T060bhsz3fr16MVfm30UKy4LoCGWryGMo+nJXSa+JoQYr4ncwVtKlG/mgJpkXHeULVz3Npr3XutxCKtaXeZYKy7F0Yt07tWYfshovsrBSvQR54MwYi7DSr1trP6j7/svAP1lrvy2E+HL6/b3AbwJt6cdHgL8GPpIak68DawALbBNC/MRae3QMrm1KM9oGt0c6rqYtf4j26lzmpvIWnUmrr00vW6fUOS/XDbUWekxMW+Ggr49vgCEDe8rGlVVm5FOtnayRyoUb8uRFjVgmvsQ1cHokhkc6rqbfxMyPuvykN4BmWebZzjbKJmJeLvGJ5jyad5JWriy8DUB7dR4Sg7YiHe0JBaFBOFlugAjDntpc5uWO+XyBRtBrYnp1DJH7u1mU7/GFCJfkulFY5qkeNIJIGBIraZZl4gmyAfjMsufY3L6Wbl3ks8ufDdPizoBz8V96K5Dt/H8E3FZ3/G+s4yWgRQhxEXATsNVaeyQ1CFuBINt5jnhs32pmqz52Vy/kktxROmuzKVvFvNwxEpvjiG6kSZZpUf30mwJdutEL5rmyyBzVtIIln0o+Z16DEtYnULUVVK1y5ZYYYlFFYtLnHt9d5WTitsWvMVv1cUl01HtcRVnxC7ixktmqnwZRReMqhgA+FL/JwVoLvWYG9Z0Sr1cudos4kgZRY6ZMiIVGCcuq/EEuzh1DW8mBZDYHay0AXJTvJhKaLt3oJ71li38WiizbHGWrKNsc3abIU31Xns/bdEo2tr3MZ5c/G0JMZ8jZGgcL/KMQYpsQ4tPpsQutte8BpJ/npscvAQ7UPfbt9NjJjp+AEOLTQohXhBCvJFTO8tKnJw2ywsHaTMBVmMxTxzism9hfnUvZRsxRPRyotXp9/w/Fbw7xKPptnl4zw5eqVusmiQFeeE0J6w2Ja47K+yli9VU3gdNzw8I9lG1EyRT8e9ckq/SYOBXLM0TCeI+iJ53p0JBqXNW/J5nWVbeJOaxncMTkKRm3sHfWZhJhKNkC86Mu2vIH+VDhAIlV9Js8DbLC65VL+EX5ct6pNaOwdJsZKCwNaRd3YnNoBHNyvef9Pm3ae+0pf/7Z5c+m0i2BkXC2xuFaa+2v4kJGvy+E+LVTnDvc4GB7iuMnHrT2B9baNdbaNRGh4uVMeeaNZX7n/uHCO77sdLbsZ1H+EC2yRFOqppn1LxzWTfTbvFf59APu6/obtBW+4a1HuyR1r45RwvihMbGohq7Zs0QjuHPJK+yvzuWILnLb4te4bsG+9L1wsxhaZNV1TyNpkSUiUeOy3BHm5Y7559mXzKbXxMyUFafJhMRYwfyc601YkX+fljS3EQnD8sK7NMgq2go+v/wZSibPE8dW818/+DV2Vy5md3We9xh+Ub6MXj3Diy+eT+5Z+gKb29eeNIn/SMfVxCI5rREJOM7KOFhr300/HwL+J7AWeD8NF5F+PpSe/jYwv+7hlwLvnuJ4YAx5/a1LuDjXSyw0i6IjHDORl2huklV6TZyGBxRdtUbm5bppEFUaxKD0cr8ppGJsyhuGLIxUNhFlE6GEpUkN8Nnlz3LP0hdolgPEMvGJ06z8MnBm3LJoO7cscuWhG9te5oaFe3h8/yoAJJYmkdCQGt9V+UPMV30U07nT4DzGVYV3aMsfJC80bVEXSlhaVeINRLfJYxBoK+g2MWUT0Z7M8RuCt6oXsLl9LXNyvVxSOMr3rv7v6dxpw88GFvFqaQFzcr2+X2I82Nj2Mnmh2dy+9oSf9Zv8kLGmT+xfeT4vbdIx6ndQCNEghGjKvgY+DuwAfgJ8Mj3tk8CP069/AvyucKwDjqVhp6eAjwshZgkhZqXPEzSdx5CtbyzncFpREqXx54LQNIiEg7qZJJWCjlNRt0uioxzWza4nwebRVnpNH9f45Bac+vnFdy99kbuXvujLVDe3r/X/oHe1veTPCYwdmbE4UJuZivK5e6+E+2gSNeapfoB0Qpvz/tqiLspZmbFx+YMWWSUWmm5T4LApUjIFGmSFJjlA2UbMVn38ZtMv03yH5sLcMb6zaz2xSPhl6TJac33p8B+nzDueeaVMbqSeh9vXYZDcs/QF79XcvGjHeFzepOFsqpUuBP6nq1AlB2y21j4phPgZ8HdCiN8D3gKytP4TuDLWDlwp6/8JYK09IoT4JvCz9LxvWGuPnMV1BY5j/cLdPNvZxvbqPOaoHuaoAbdDTEXYDupm5qke3qrNokWV/PFEDOYTmuQASrou2MO1Zj+j2HkLrrtaYYmlE9xTqZbPnUteGefffuozt04BVVtBGRf2q9/5NYga79SaaZZlOmszmaP6vbGI0/eqbBVNskpiJUjoNkXmqR4OatfcuL1yKS2qxCW5oxzSTZiamxZ3af6IDxlm6q7jPQnu+L87bQUSw6a91yIJsyZGwqiNg7V2P7B6mONdwG8Mc9wCv3+S59oEbBrttQROT4OosqhwkA+0KzvdVp7P1fEB5qpeqigO6cYhUg1KGJ9kbpIDQ0ZGNsmyS1KmA2Lc4HrhXfayjby3EDj3VJEUgQjrM3gSMMBB3UCDqNIqNeR66DV5WuQADaKWbgLcA8pW+bBUySrmyBItqQR4pqO0KH+II7rRSYKLhEvzXTTICl01931HeR4faehIk9Lnv9Ex81SH6yrPvNZNe68NHuwICQXn04DdBy7mw5e/ScW6pqADtZksL7xHf9oVqzA+hNBbJ+IWiRoSQ6+Z4QfMq3RX6IzEwJCO6CzvEAzD2PGvnYt4vnMxz3cuHnL8sX2D+7IsIZ0tx4mVJKlnOF/10SQTuo0kFpoL1YCT2DYFFJZKGl5SWGZKTavUzJQVKlbRlM58uET1kVhFiyzTqvpokgPMVn1+fkSzKlMyBVpzfd5jqBcAPF/IdDBS1uA5HJm8RuD0BG2lKc6znW1cv8Dl96tWcrDW5GUWWlSJw6l2TtUqWmSJsskTyypVq9BWpiWMbgSkxFAmYuOSwZ3Zw+3rnN6SKdCi+n0cPDA2SGGcR4AzFE2y6sJBopktHWtYGh0iFgaJpZomgX3uAYtJP8fSoi28r2cwR5aoWMXr1bm+iqkoNO/qAherCi3SULImLVowVK1kjhpgf9JKlDYyHqy1eE9Rp2J9rbk+umqNlExhXMJKxjppltOVSt+++NXzdEWTm2AcGJtRmjAxuyZbZJl/7VzETFnBIGiWZfYlc1kQHUZh0QhaVR/duohBcseSbTy+fxV5oZEY7l46+I/2SMfVJ8RyMy/hsX2rg6DeOSCPQSMoihoNqsoRHfmc0OLoMGWbQ6NRWJpk4kMBmRehEb7aKEHQqsosn+82C9Fbl6aNa8pLabxZK3J5rkR/GlJMrJsjHVNjjupFI/iThR8+z3dhZERCc8eSbWxuX0uTGuCWRdt5dN9V58QYjHTNmIhrwkgJYaUpToThowv2c8wUOFBr4aB2TVSdyRy608ld7yazMEhuXrSDJ/av5JZF27l98avctvi1Ic91qh1ZYnMh+XyOyMI/h3WeavovOy93DI3wVTmtyhkGJZxhyORNsg1AYkmr1QZbiFZd9jYXqyoyPacgdPpa0CJrFISmKGu0yhpKOH2mbl0837/+GfFIx9VsbHuZrlojm9vXIk+R+xiJqOF0JhiHKUz7gYt4P00kS2Ho0o1UrWKO6mG2crOcDyYtbGx7mR7tcg2jKe97dN9VQ7SWAmNH1v0MDGlCNFam0umuiGDBpe8B0G8kZat8ojn7B6/3KNoPXMTuA06l9ZJL3+PKy96hJW1+/OiC/UggFoLZyr1WxbqS1yZZ9XmGiYgSxv8dZknnU02kC4npUxOMwxSmbf573LBwD+BmO5dNxJ1LXqHbuN2fsZJPLXueR/ddxYL8B6d6qlPSo+PgNZxDImG8umgkzBAD4aqP3MK+eP57xMLQJDUt0hAJiIQzKlmCOuP4Ua3L57/LlZe9w7OdbRwxefqN5bCWqVJr2gmPIJ7AXe4SM+TvMJYJsUiGJO8DIyfkHKYw/9q5iI8u2A9Al27kvaSF7+6+gTk5p79TFYrN7WuZlytx/YL2Ub9O2IGdeyIMFRSJld6biG2Nss0RCXjr7Yu47NL3WDz/PXYfuBgpXJ9DktqAzBhUrUQJi7aC9gMXUbaKVZe97V9nQa7PeyEnZ+LH0R/aew2xVL4cO3DmBM9hCpMZBnD5gsvyH/jyU2NdF2smxTAWhBLBc0O9HLrCklinhVRNy4sPalcIsP2tSwHnBVSsm8aq0odqBBJokNkQIJOGjzTtBy5i34GLaD9wEdrCS28uOG+/21iSVUht6VhDs3LjSmORDMmVPdy+brwub9IRjMM0Ii80pXRyW1FWOFxrZusby0fldj+2bzWPdFw9pKY8lAieGwyCBFc1lIWXpLA0iJqT205LVmfKwSbGtvnv0W3cv3cWTkpSAzHY+CaR4BPZUWpI5sgKuw9c7I3NZEFhebh9HXcueYWqVcP+PYYenJETjMM0YUvHGifRHR1jXnSMvND0mpj1C3efUJU0Em5b/BqKOik6AAAgAElEQVR3LNmGRvDYvtVs6VhzwjnDiZ8FzgyZhoMyTSxjhZe6GCJ/YQeTzRkGQa9RvkpJ27RqKTUwmRdhcOEnbQcNhMJpNf3irXpNzIlPJGo8tm+1zz0EefjRE4zDKJiMCa7E5miWZQ4mbhB9ty4yP+ryyp7Dsbl97QnewfHcueQVblv8GgrL1jeWD/nZcDIGgdFh6voVMsXTrDO6bBVJWq5atop9qYFYddnb6TS3TEH3xLJOM8zXBvzzHtYN5+pXGnPuWLKNO5e84qVeAmfHlM7WjGWjSv1znao8biLy0N5r6DVF7mp7ie/v+Rgb215m095r+fnAAu5d8eSwj3EGwQ2MGUl5a7ZDm8xNP+eb7735/9FrIoqy5r2AxEo3whNIkH5iW9VKTBoeynobXPWQTvsYJKSd0kdMnkxs40OXHWD7W5fyvp5BqypDXTlsYgc1mOp7JDLKVrF+4e7zcSvGlKYJVG47Vg22I2Us//+C5zAKJlvc8u6lL/L55c/wbGcbc3M9fHf3DTTJMivid4b1grZ0rHELj0yCrPE5JOtCLpkcSSpeCM4oZJ5C/SzmslVEwpDHTX3Lzu81eWRqWI6kU+Ce7Wzzj1t12dtUUX7iW9WmvRAM7YUo14nwxUKz7vLOc3wHzg1nEkoaLhwacATjMI24fkE7B6qznZIqgrLJUzIFHum4ms3ta3l031W+4igvdEgwn2Oy7uV6iYtIGJ9fALdQ99ucF8jLzolFDWMl/TZH2UYYBAd1I5HQ9JgYhRliIK5f0E63mUG/zfmcg3t+SckqSmkYqd9IDusGDo+DcN54kNjcpAwTnw+CcZhmfOGKp1OhvIgGWWFOrsfLMGQzoY2VfjZ04NyReQLZR0M6DzpDpp6D8Tv6nE9Qa0SqqGtpkQNI7JCpb9m87npuWLiHxDoPQqbhpUyNSWIpmYgrL3uHGxbuGVIGPZW5q+0lDteaQ/HEMEzpnENgeE6WKH5o7zUkpkCTGvDf54X2094mWzhtolMfMpJpclliyQtDr4moIonRSOEW8iZRpTeVzIiEIbFOhltiOZaKHpZt5ENOTbLM4/tXDVHK7dKNlGWFBakaq7ECJSyHTZFkCmwINrevPeNCiFgmoXhiGIJxCHhimZC3GmMl83LH2KfnYpBEQgfDcA7otzlioUmspN/mUbhw0YFaA7FMuH5BO8+8sYx+m6dBVJHCMEeWXKI6NQwAJZtDI2gQVSJh6DV5ymYGvWYGZRPxbGcbsUhYd3kny/OH2Vm9kIPajXhtFhV6Tf6sOuQnEhvbXuahvddgkKmq8Om79+9qe4lHOq4OZa/HEcJKAc+dS15hY9vLxDKh2xSJZZLODJ64ejqTmXWXd3Kw1oRGcLjWjMLSa2LK1pUaP7ZvNT0mJrE5ekzMEd1Ir4340GUH+PDlb6azvyUfvvxNrluwj4O6mc6kFY3kYG0mPTqmVfVxRDfSJBI6376I5fPfJRYJrbLM9Qva+dXL35oyIaRMZfXupS8Si+SMZF3uWLLNd0+fqnR7OhGMQ+AEbl/8KrcvfpVYJBgrg6jeOeKJ/SsxSHpNjBKGLtNAv827nJCN3M7fZj0K2s9mzqbC9duIHltg6xvLef2tS5inemiQFQ4ks6naHGWb52BtJhJDguSIjvj5m5dx86IdXHnZO+P5q58T7l76Ipvb1/rQ0g/3XHdGj8+848yDmO6VTME4BE6Kq6QZ+Z9IqPo4c/pNgS7dSCRq9JsC/aZAtym6vIEVJDbHwWQmB2szUcJ4zwJcfuGIbqRsXSL5sG7iYK0FgFg4pVYlLAdrLT753T1Mj86/di7ipTcXnDCKdDJStcr3gbSo0ogfV6+5lBmF6S7aJ6y1pz9rArJmzRr7yivnb0c7WZu7zqYJZyRTtLZ0rCEWCd26yN1LX5y092k8+PftHWgr/bjNqlXkhfYVYzKV564f3KOE8Y/RdtBwz1Z9AHSbIt266LwFm3N5BTlAiypxce4Yxgq6TJEGUaWKIo9O50IkACMKMZ3v9/hkf8MPt68LubBRIITYZq09rVsUPIfASckMwwM7bzrleQZJLJMQqz1DsrGq2rrkqcL6BT/b/fabPMZKjJUkVtGjY+5Yso0eHROns70BDukmDtZm0qr6uGfpC0A2z6CKRhKJGrurF9JvI29w8mhiUSMWCVUGd9yThbvaXjovoZ/pGl4KxiFwWr604infJJeRhZCyBS1rrAucGd266MdvOhkMNWTkalZKrFN57lgmbOlYQ15oyibvd/wAF0dHOZDM5pGOq7l76YscrjXRa2b4Wv7Zqs/3RSQ2hxTGjx0FJmVH9LnKh23pWOONQv09nk4E4xAYERvbXh4SYirV1dVHojaklj4wMjLp7KzGvmwiZwiscD0ndTFvbYX3IO5c8gqR0ESiRpdu9N7F4VozDWl12Q/3XEer6mN54V0e3HUjGum7sJ0mk1vwjHWlynk0gUHuXPIKdy55hcf3rxqVavFUIBiHwKjY2PYyj3RczV1tL3Hb4tf44Z7rpu0Oa7TkhUYJww/3XOclLe5qewklrPsgmx2dCe25zvWH29eRWEWvmUGS5ikioYlllUjUyAtNW+EgDbLK+oW7ac31MS/XjRSGHhNTTvsiwIWvEquoMvkb4B7ae40vZz3Tx50sJDqdNz3BOARGzR1LtvH4/lVs6VjDnFzPeF/OpMN5XZpPLXveJ1Y3t691BgLjwj5p13JeaHTazZwZi8zT6DeFNCSVQ2FpVX3k0cyPutj6xnI3/c9GKAwtqpTmHJwnkcl/T4UmuNGMq92091ryQtOti+fgiiY3wTgERsVLby5g6xvLuWXRdhpkhdsWvzbppMzHm3uWvuBDSw/tvYa7l76IRrJp77VsbHsZheXupS/6RHEsE7QVvlwzErXU00g9CyvpMTElUxh8jEhokBVikZDYHCVToGwjklSVVSOmTBMcQIOsjrgwYtPea917gPSSMYFBgnEInBGb9l4LwPbyfNYv3M2WjjV064YgXDZKDJLN7WsxqVFQGCKhfegoW+iyfpPE5oila05UwrJp77VE6ajQfpN3PxcJsdBsL8+nRVaIhKZJlolEjUjUkMLQIKokVnHdgn3j+euPOXcs2XZaGYxHOq7m0X1XITFsbl87JTSlzgXBOATOiHuWvsCWjjV8atnzgEvcaXtmzXIBx8Pt6yjKClIYmmQ5lSoZTAxrJHcs2ZaGi1ypa6a4urHtZR+KUri8QSwTFIZ3arPYXb2Q+VFXqt+UpGM/Xelqr4npMfGUMwwjLTkt22hIcUUktC8JPh31FXtTnfAfHThjevUM31G6uX2tX5RCQ9KZcVfbS75sNdu93rFkm7+PkaixpWON17bKdsSRqPnE6z1LX0AKg8ZVMWU5im7dQL7O0PTbPOBkv7WVbFi08/z8kucRhT1tl/5j+1YTi4TN7WtRwnojW99QWM/xCe7pNOPktP3hQohNwCeAQ9balemxVuBvgQVAJ/Db1tqjQggBPAjcDJSAu621P08f80ngq+nT3met/VF6/GrgIWAG8ATwBTsB27bHctzfROsi/uGe67wncCoe27eaA8lsZiu3y3q4fd2Q+QMPt6/jd/e4nezGtpfZ0rEmlY8elIKIRA0lLH+zbHINrj9XRKLG5va13mN4dN9V9OjYjew8riHukY6rkUL42v6H29ehreDupa/w2L7VqZZQDiXKKAw3LNzj53orLN2mSK+ZMaXVRzNpkeF4pONqynaGD61tXPIyj+1bTckU2Ng2fLnq6ZLcm9vXIoWZkvpjI/EcHgI2HHfsy8A/WWvbgH9Kvwf4TaAt/fg08NfgjcnXgY8Aa4GvCyFmpY/56/Tc7HHHv1bgHDMSw/Bw+zoMkj4d+5JKwNfeO6kH91G1Ko3lDu49lLB+B5wlYac7m9vXurAcklhWaVH9rlM6rUjKjEJ2fxOruHPJK95rywxuJmGicbIakaixIH+Y5zsXe6OjERzRjVPaMNyxZBt3LnmFRzquHjbEdMeSbT58lJ0HQ+ebPNy+ju/v+diIS2I3tr18gmGo12mazJzWOFhr/wU4ctzhW4EfpV//CLit7vjfWMdLQIsQ4iLgJmCrtfaItfYosBXYkP6s2Vr7Yuot/E3dcwUmEHe1vcTti1/lK1c+AbjKGRhMlOaF9ru2rGY/W+AUBm0FeaG5e+mLQ8Id05lsUbqr7SVuWbSdXjODvNA0yQF/f8HdY1MX9rir7SUebl9HyRRYnD9Eg6yQF5rF+fdZlD/ku6BduarTYOo3hWkx0GbT3mtRwhCLhIfb17G5fe0QQ1E/4bBF9XPb4teGVDf1mwKfWfbckFGqIyF7jofb16EwPNy+jofb101qSZnRyg5eaK19D8Ba+54QYm56/BLgQN15b6fHTnX87WGOD4sQ4tM4L4PLLrtslJceGA3Pdy7msG72MddsscoMQI+OKcrKkEUMXHVNZhggi+GG6pDhKIpKWmaao0FWfMlqdtxYV9lUtYq7lzpdoS7dyJxcD3NkiSPpWNBW1cc7tRZmqz4O62ZaVR8bFky9HMNwFNP7lhcuZHf8rr7++/ULdwMM8abmpv06WS/JSMk2Rne1vcT9OzfQqvqJRI0ExZaONTTICv2mMKnCT2OdkB4uXmBHcXxYrLU/sNausdaumTNnzigvMTAaorRRKNsZZXX2GSb9U8pE3rKQSNlEbhZBmjRtkNXgOQzDE/tXAq4vIRI1r5SaF9qH5zJjkReaR/ddRV5oek1MYhXv68a0nLVAyRSIRUK/KdAiSyfMkp7KZLIXXbXGUT0++5s+Uy+rvhhjfnSETy17nruXvsiBpJX3kxZuWbQdhfWl4JOB0RqH99OQEOnnQ+nxt4H6TOOlwLunOX7pMMcDE4wDyWyW599jtupjY9vLvFm9AGOlj7lmEtEKMyQP8allzyOFoWzczkojhpRrBhxuII9CCYMSBolxard1GkjNqkwsEubkerwRaZLlQXVXhHts+hzgDMp0lID41LLnR1yeWs9Y3Kts0NDm9rXMj47whSue5ru7b+BA0sr8qMufd6bDiM43ozUOPwE+mX79SeDHdcd/VzjWAcfS8NNTwMeFELPSRPTHgafSn/UKIdallU6/W/dcgQnEHUu28dEF+4lFwmP7VjM/OoIUhu/tvt6rhGa7rij1FMDVnius/3lSp+sTcDyxfyVlG/nBP+W0mU2myX2N8ONas05njaBJlmmSAxxJhwXFoubF9bp0I93GSUJM1yFMtyzazvf3fMwrCj+5fwXPdrYNOedcJY9bVMn/Hzzcvo4mOUCr6qOzOhjxOFUhyETwME5rHIQQ/wN4EVgmhHhbCPF7wLeB9UKIdmB9+j24UtT9QAfwQ+CzANbaI8A3gZ+lH99IjwH8e+C/po/ZB/y/Y/OrBc4FNyzcQ7Msc7A2k8TmaM31+Z9lnkTZRt5TgEENoWy3GxjKzYt2UErDQS2yNOQeZcnVLLQUS3cPIzRlE1GyBS7OHUUj2V651EtjZH0OGxbtnNZhvM8se84rCm9YtNOrCW/ae63XsToZD7evO+NZDlmTXNa3kr1vdy99kbuXvjiiykBwnmR2DeNFmAQ3DpzPPoex7M/IeLazjesXtLNp77UUU9c9CyNlCelIaJI0Rq6wJFY5mYdUTO6/LV045tc12ah/bza3r6VV9aHSbuluXfTT3nrNDJrkAAbpQkfYtOTV0GtmoK3L85i0xLhBVrhl0XYe27eauap3zLWTJsokuPPBIx1Xn1X5b6aZlbGlYw3vJrNYkP8AGJ+mupFOgpveQ1LHiZH8sY/VP+BY/iNn1339gnae7WxDcgGJzVE2EZ9a9jyb29e6mn2RuLCHGkhDJM5INMhKGioJCpjHEwntcg4Yn0CORUKXaXSSGSh/L2OZUBSD8XSV3ttIaDqrF/gafiUkB/VMHt+/alrmHcaCs+0LOb6JbjpXKwWmCdcvaGde7hj9pkCDrPDQ3mt8XX32D9WrnUprln/oMTEbFu30cfHAIJmXkIUhXCXSDGarPheOw+VsmtSACzOh0FZyqNbMPHWMbt2AwtCsyr6BS2KYp46dVBoicOY837l4xOdO9vGiwXMIjJoNi3b6hLOrw8fXdWeLXDYbOUtGAyEhPQxZVVLVKl/K2m8KvopJW4lJjW+PiWmRJUq2wLxcN+/UZjEv1+3Pj6Xz3OapPso2olmWT/v6WzrWTKpd7XhRthGP7VtNc6pym71Px0+Le3z/KvJici+v02JL8f09HxvvS5iyuJGVNVpUiXuWvkC1bv5xVtZ6x5Jt3Lb4NWJZBZjWCdLheHL/CiJR80az3xSIRM2Hk1pkibzQLieBdZLcaWI6sTmUMPSbAgY3y9tYSV5oDtZa0IhT6g2Bq2YK78npeWL/Sq+MW7YRZRuxfuHuk44RnewifZPbtI2Qzyx7brwvYcqjreShvdfQohIe3HUjiwr93LJoO1s61rD1jeWUbUSDyAaxTIs9yRmhrSRCg3BehPYd6E5qu0WW6DExsUh8EUAsEmLl5Lj7bd7LZGShp2wBi04xH/rx/atIbH5Kay6Nhif2r0TiGg5vWLiH5zsXE6eeQCQ0DaJKl2kY9rFP7l+BmgJ/49PCOATOLdnOaesby+k3Bebnuzhca+b+nRuYqRr8AJpu2+Br9QOOJ/ev8M1uGkEeTbVuNoNGklhFvyn43b2xkoO1mUhhaJZlDtRmUpQV5qreVDpC+x6HWCT+6+N55o1lQH5adVCPBOfJuaFLxkqeeWOZV3Mt24iYxBvx49n6xnLywtKfik9OZj2ryW/eAhOGzMW+OHeUVtXHTDVAsxzgcK2Jbl10ct1pQ1zA0SArzFG9bpynqNIkyzTLsjcMeXQqO+K8hUw4TgrDbNXncgu5Y7TIkg9LZR4GuBj58bmErW8sHyLlXbVhj5jxxP6Vvru8bKJU9kW4sF9dYr9sIrSVXvYEXIl3JLQ7Hz3mhmGkjXHf3X3DmLxe+KsIjDnrLu/ksX2rWZo/SLcp8qH4LbrSLt43q3NYVggKKRmZZ5D1iJRtzif4M2/CNcEp38PQpRtpkaVU1FCCMPSYop8XnZjcSePg4AyGtpKyjSilKqTTna1vLE9DeK6PRCO8dtXxYb6ssKJFlui3eW9oSQsHAPZX5w73MmfFPUtfOOXPs5nYn1/+zJi8XvAcAueE2xa/xg0L93hXfH91DonN0VY4SBJUWT0HazMp28gvSBrpO8o1blBSr3EzNLJwUX0+wVUwOW8sFgldp5nZkO1080L7buHpzpP7VwzxCuqr6bJ8TV5oJyCJ61iXadVYJDTayiFGI0Hx2eXPjuk1fm/39ac953TG40wJxiFwTpmnetLdbzrcHkPZ5Mf7siYMWbVXJkiYdZrXo7C+87xBVP2sB4mhVfWl99QZitOVo2aeyKFaEzD2C8pk4cn9K3hy/wrnMdTdbzetcHBAUiyddEkWXsqnYaO80F6JOCsdzoxKhObx/avG9HrH2tiMhEkbVtq7bf9pu3/Hs+3+bBmrLuqR3oNzJYnw4cvf5Jk3lnFxdNTnGpQ4M638qU6/KTBX9dFvo9RQuEUnMxSZ95VJklRN5Bvhek1MkywTGX3aklVwC1dic35mxHBMxZ6HZ95Y5o1uYhUGJ2yY9Y9kIocApbSUWFuJttIb30z6RQmTvh+1dPqhBYEvK9ZWcqA6e0yvfzxGC09a4xCYPLQqlyztNa7io34aV8A1Ez7b2eaT0IDXojJWprIa1nsHx6uz9prYL1ynwvUzuLBVLJOTJkynkmHIjIJGUTYFv7t3OZe4LpEvvdidxHgZ9HpiktSTUIMjb5Fo3PuVNXxqxmenP9aEsFLgnFO2igZR9d8H+YwTyaPpNwU/gSwSTnXVL2b1cfBUWqPfuvBc2eRHVCKcNW916+Ip1UinCk/sX0m/zVMyBZeER/gkfl7oIZ5TfbNgybqGwkzYMPN0e80MSqbg/36dB6Z8qXHZRlStomSnRi4nGIfAOWfd5Z1IYZijetBW+k7pwCBNskqDrKCw3kDUl/xqK7130GtiurXrXcgWr+F2useTNdNNB57Yv9J7UlWrfIgoo2qdN1ayhSGaVv2mQL8p+Me0qH4feoplFY3wj81CT1lxQNZTMtopdBONEFYKnBeMlW6QjY1ITPizO57EDlYpgbtfGuGNgkH6WHiWNO3WDbSo/hErrpZMgZsX7TiXv8aE4PH9q9BWYXATCSNR80UQWTioPu+VeQwmvf+ZenD2+Ow9gNRbIEdCLe0RUc5AYziiG90cdTk19txT47cITHiyKXLvJrNokgPjfTkTji5TdEliUfWGIaN+hnS2q+03edQZVn5NB8OQiT5m4aPMK8jGr/pZ51Z6zyIrA45lMsSr9b0Nviku74URYbAhsUkOIIWhKCt06+Kk7oquJxiHwHnDICnKapDPOAkawWHd5Af6ZDvWLB6eTxPUGVKYoIk0DM4gOAOaNQ9mHc1lEw2RRc+S0PVhpXqjUE0fnxmCWCR+jGtic97YNMsySpgT5jdMZoJxCJw3ekzM0VpDaIIbhvULdwODontZqKN+sZJ11UxKhKT+8Wzae62v4NJIlLDoLDSUJpiLsuI9iKyJMJuqp607N5ZVbxgSm/MG2fcxHDfqtmQKdOvilBuoFIxD4Lxx55JXmJXrP6VK6HQmQtNv8954Zp+z8Z+JzbnxoenY1alUcjoWZEY0qyICZ2ylMDTJgSHT87Ieh6pVfua5RiDT5H6/KWCsm59RP/4WXBFA2UT0mzyHas1UrZoyoaR6pnRmcDwaRyYaY3kPxqLpbm6uhyN6alRzjDVHdKOLe6fyDFXrGq+wLll6RBdpkgNoxJDO5vB37sTmmmTNN6vFIhkyx9zgZnFn/SMaSX+ar4mlMyBZyCmWCdq6Luh+U6BFlShbRSwM7yazXG7BNKIwY9LPMFHfvyltHAITj9sXv8pj+1aP92VMSDa2vczj+1el8W1XbVPSBS+X0aJKSGGCx3AcD+66ESmgbPMY60I/XaaR2aqPoqzQa2ZgrByyu39o7zVpCEqCgWZVpoxrDuxOjXBRVrxshhKW95MWWnN9HKk18oUrnh6vX/e8EYxD4Lxz2+LX+C9MzN3SeNNZncP8qAtwsW0p067ddGd79xQMX5wN39/zMaRQHKsVuTA6RkIE1pnWU4V6juhGFJaZqp9jusEbloujo14Ft9fMoFe7WRcaSUEm06J5MCMYh0BgAtGiSn5RKsoKsUyCpzAM39m1nlgklNJBRUVVodfE9OmYr618fETP8YUrnub+nRtoVf18atnzPNy+DnBSGD1mBnHa1S+F5bPLxkYGezIRjEMgMIGYTjvTs6FiIhKhuHfFk6N+jm/suIULcq4E9ft7PkZeKA7WWjBWpFVh+SmhkTRaQrVSIBCYdHzlyidGZRge2HkTAF+8YiuNquwXf4WhV8+gT8c+xzMWQ5Du37nhrJ9jvAieQyAQmDZ8acVTPLjrRso2h7ERD+y8CU0TiXFVSpHQYzbj4hs7buFrK0fv2Yw3wTgEAoFpRdnmSEyOr678KQ/svOmsQlPD8a3Xbx4i5jdZmdxXHwgEAmdIvTH40oqnxux5v779ViKh+erKJ8bsOccTYe3kbMNvFq32I+I3xvsyRsVYTXkLTH3O9zTDyfx3dyb36sFdN56XXoWJeD+ftn+/zVq75nTnnTYhLYTYJIQ4JITYUXfsPwoh3hFC/CL9uLnuZ18RQnQIIfYIIW6qO74hPdYhhPhy3fGFQoh/E0K0CyH+VggRBgwHAoEx5/6dG/jGjlsAztow3LfjE2NxSROakYSVHgL+Cvib447/J2vtA/UHhBArgDuBK4GLgaeFEEvTH/8XYD3wNvAzIcRPrLU7gfvT59oihPg+8HvAX4/y9wkEAoEh/PEvb2dmrnTWuYVv7LgFbSV/uurHfHXlT8fo6iYupzUO1tp/EUIsGOHz3QpssdZWgDeEEB3A2vRnHdba/QBCiC3ArUKIXcANwMb0nB8B/5FgHAKBwBjx57/y6Kgf+9lt/wcXF7r56sqfjri5bqpwNgnpzwkhfhd4BfhDa+1R4BKgvovn7fQYwIHjjn8EmA10W2trw5wfCAQC553/8Or/TmOuwjdXPcb3rv7v430548ZojcNfA98EbPr5L4F7oG581SCW4XMb9hTnD4sQ4tPApwFiimd2xYFAIHASvvzab1EyeS7KH+M/XTU1qo3OllEZB2vt+9nXQogfAlkA7m1gft2plwLvpl8Pd/wDoEUIkUu9h/rzh3vdHwA/AFetNJprDwQCgeP59up/GO9LmHCMSj5DCHFR3bf/G5BVMv0EuFMIURBCLATagJeBnwFtaWVSHpe0/ol1dbT/DPy79PGfBH48mmsKBAKBwNhxWs9BCPE/gOuBC4QQbwNfB64XQnwIFwLqBP4vAGvt60KIvwN2AjXg9621On2ezwFPAQrYZK19PX2Je4EtQoj7gFeB/zZmv10gEAgERsVIqpV+Z5jDJ13ArbV/BvzZMMefAE4I5qUVTGuPPx4IBAKB8SPIZ4wDE7FrMjAxGcu/lfPdbT1WjOV1h/+9kRMkuwOBQCBwAsE4BAKBQOAEgnEIBAKBwAkE4xAIBAKBEwjGIRAIBAInEIxDIBAIBE4gGIdAIBAInEAwDoFAIBA4gdAEFwiMExOxKW0ijrANjWvjQ/AcAoFAIHACwTgEAoFA4ASCcQgEAoHACQTjEAgEAoETCMYhEJhG/K/Pf+6U3wcCGaFaKRCYwPza039ERSv+7aZvj/gxv/7MHyKFpWYk1rox7UJYtJEoGfPxZ/+Ais7x3G88wE+u+ysAPv7sH2CtoCGqcKw6AyksxgqksERS8+THHjwnv19g4hKMQyAwgfj4s39AKcmjpGEgiTA2IlKaj/7jvUhhUdIgheWfb/hL/5gNz30BbSQDtQhtBcZGaCP9+dpIjBVESqO1Qgo3fv3Xnv4jEiNRwqJkjnItR1+SB0iPmSGvE5hehCIdzuYAAAteSURBVLBSIDCO/NrTf+S//shTX6a7PMMt0pUCA9WIcpKjnOSo1HLodCefLdjr//k/8NF/vJcjA0WOVWIGkoiBakSp4hb4ak1RquRJtDMUmZHor+YZSCISI0m0olzLcWwgppLk0EZSreVIUq+j/voC0wthrR3vaxgVzaLVfkT8xnhfRiAwev7pUgZqEQCJkX5xlsKSaIUxAikt+VyN5rjCv9z4F/z6M3+INpJa+pFot4hrI6lpSU4ZjBVYK5DSIAAlzZCXzUJN2gqMkUhpUMIiUo8in9P+6+HCWaEpbXLztP37bdbaNac7L4SVAoFxoi/Jk2iFtYKaln6xrmqJMYIo0uRzNWbkE/7lxr/gf9n6/6Ct8yRqWqGNc/yNccZACEtSU/75rXU/L1ciokhjjEBrSS6nARACbwRqRpKTBikNM6KERCsipc/zHQlMJIJxCATGiYGqyw1YwBhnEJJqDqkMcSEhn9Nsu/nP+Ng/fYlr/vFeyklEtZajlhoAZxTcIg/us9HOIGTGQkiL0ZKKlqjUI8h+prXzGoQQFKKESBnvZfzrx+8fj1sSmEAE4xAIjBP9AwUArAWbegEqp8nnaxQLVZSwrH3yK2hTcN5CzYWabJ2nkD3eWHd8iDeQKHKRRirjj4EzKkK4sFNzsQwMHz4KTG+CcQgExgmtJdSVmkb5GlFOk1PaJYaNoKYV1SRHLVFY8OcjrDMowmK1wKYeA8ogc64MNZevea/CvQbkcpoZ+YRi5EJVgcDJCMYhEBgvrAsLSWmRyqCUC+kkWlGtufxALVEu5KRTT0EMhpGsxRsFoQxSDXoHShmyWpN8vkZjXAneQeCMCMYhEBgnrAUhLUIanwuoGZeU1lpgtMLU0nCRskNDSdpZCKkssr4aKf25lJZcTvP6rX963n+vwNQgGIdAYByRwiKlRSmD1qlRMBKrBaYmEdIiI4M1ApkbNAJC4YyCFUMMglKGOU39JEbyYkgqB86CYBwCgXFCSAvCVRPZNKFsjMQaQIDKmyELvwsr2cG8AyCVIZczNMYVXt7wrXH6TQJTkWAc/v/2zj7GjqqMw89vt7tbIq1spWpDq6XGRMGYWiqsgZAGEiiFUBI/wl8UMWkiaPArUsQgGkkQv4rBQKpCKX5QQI2E2GCDoibS1hb6saQpXdtGKw0NKWAJSV26r3+cd3dnd++9e+/c3Zl76/skk3vumTPn/OY9O/veOWfOO0FQFr6uARN2Ms0lmIE6bSTExUhREx2dQwwNpTuF7u6TzJ31Bn++9HsliQ9OdcI5BEFJDJ0U6gCG/YAydwhOR+dQcgxKdwidHUPsufpbudqLlc1BI4RzCIKSkD+Gqg4bcQBZx9Dpcwzd3YPMnnkiFqYFhTKpc5C0ANgAvBsYAtaZ2T2S5gAbgYXAIeBTZvaqJAH3ACuAN4Hrzew5r2sV8HWv+ttm9pDnnwesB04Dfg/cbO0a9CkIGkAdPqcwY2hkRbOUJpY7O4foz3mXEATNUs+dw1vAl83sOUmzgB2SNgPXA0+b2V2S1gBrgFuAK4D3+3YBcB9wgTuTbwBLSTfSOyQ9YWavepnVwBaSc1gObJq60wyCFkTuHDxIXkeH0dWVQlyEUwjKZlLnYGZHgCOePi5pL3AWsBJY5sUeAp4hOYeVwAb/5b9F0hmS5nnZzWZ2DMAdzHJJzwCzzexZz98AXEM4h+AUp2NkjQP09AwyODgj1iUELUNDcw6SFgIfAbYC73LHgZkdkfROL3YW8K/MYYc9r1b+4Qr5QXBKM6PrJPs+fnvZMoKgInW/7EfS6cCvgS+Y2X9qFa2QZznyK2lYLWm7pO2DnJhMchC0NOEYglamLucgqYvkGH5hZr/x7Jd9uAj/POr5h4EFmcPnAy9Nkj+/Qv4EzGydmS01s6Vd9NQjPQiCIMjBpM7Bnz76GbDXzH6Q2fUEsMrTq4DfZfKvU6IPeN2Hn54CLpPUK6kXuAx4yvcdl9TnbV2XqSsIgiAogUlfEyrpIuCvwB7So6wAXyPNOzwKvAf4J/BJMzvm/+DvJT1x9CbwaTPb7nXd4McC3GlmD3r+UkYfZd0EfH6yR1klHQf2NXKyBXEm8ErZIqoQ2vLRqtpaVReEtrwUoe29ZjZ3skJt+w5pSdvreQ9q0bSqLghteWlVba2qC0JbXlpJW90T0kEQBMH/D+EcgiAIggm0s3NYV7aAKrSqLghteWlVba2qC0JbXlpGW9vOOQRBEATTRzvfOQRBEATTRNs5B0nLJe2TNOAB/4pq95CkPZJ2Shp+NHeOpM2S9vtnr+dL0o9c425JSzL1rPLy+z1KbR4tD0g6Kqk/kzdlWiSd5+c64MdWWsVer647JP3b7bZT0orMvlu9jX2SLs/kV+xjSWdL2up6N0rqbsBmCyT9SdJeSS9IurkV7FZDV+l2kzRT0jZJu1zbN2vVJ6nHvw/4/oV5NTehbb2kgxm7Lfb8wq6DzPGdkp6X9GSr2K0hzKxtNqAT+AewCOgGdgHnFNT2IeDMcXl3A2s8vQb4jqdXkNZrCOgDtnr+HOCAf/Z6ujeHlouBJUD/dGgBtgEf82M2AVc0oesO4CsVyp7j/dcDnO392lmrj0nraq719P3AZxuw2TxgiadnAS+6hlLtVkNX6Xbz8zjd012ktU191eoDbgTu9/S1wMa8mpvQth74RIXyhV0HmTa/BPwSeLJWPxRpt0a2drtzOB8YMLMDZvZf4BFSFNiyWEmKSIt/XpPJ32CJLcBwZNrL8ci0lkKVbyYtFmwIM/sLcGw6tPi+2Wb2rKW/0A2ZuvLoqsZK4BEzO2FmB4EBUv9W7GP/1XYJ8HiFc6xH2xHz94qY2XEgG124NLvV0FWNwuzm5/6Gf+3yzWrUl7Xl48Cl3n5DmpvUVo3CrgMASfOBK4Gf+vda/VCY3Rqh3ZxDtciuRWDAHyTtkLTa88ZEpgXyRqadCqZKy3REyf2c38o/IB+2yaHrHcBrZvZWs7pUI7owJdptnC5oAbv50MhOUuy0zaRfrNXqG9Hg+1/39qflehivzcyG7Xan2+2HkoaDsBXdn2uBrzIaVaJWPxRqt3ppN+dQdwTXaeBCM1tCepnRTZIurlG26Qi0U8i0Rcmtk/uA9wGLSe8F+X6ZutQC0YXr1NUSdjOzk2a2mBQQ83zggzXqK1WbpA8BtwIfAD5KGiq6pWhtkq4CjprZjmx2jfrKvkYr0m7OoVpk12nHzF7yz6PAb0kXylRFpp0KCo+SWw9m9rJfxEPAT0h2y6PrFdJQwIxx+XWjFokuXI+uVrKb63mN9EKvvhr1jWjw/W8nDTNO6/WQ0bbch+nMzE4AD5Lfbs1cBxcCV0s6RBryuYR0J9FSdpuUZictitxILyc6QJqcGZ6IObeAdt8GzMqk/0aaK/guYycz7/b0lYyd/Npmo5NfB0kTX72enpNT00LGTvxOmRbg7152eCJuRRO65mXSXySNoQKcy9jJtgOkibaqfQw8xtgJvRsb0CXSuPHacfml2q2GrtLtBswFzvD0aaQAnFdVqw+4ibETq4/m1dyEtnkZu64F7irjOsjoXMbohHTpdmtI+1RXON0b6amDF0ljn7cV1OYi74BdwAvD7ZLGBZ8G9vvn8B+VgB+7xj3A0kxdN5AmlgZIEWvz6PkVaahhkPQr4jNTqYX0nu9+P+ZefLFkTl0Pe7u7SeHcs//0bvM29pF5EqRaH3s/bHO9jwE9DdjsItKt925gp28ryrZbDV2l2w34MPC8a+gHbq9VHzDTvw/4/kV5NTeh7Y9ut37g54w+0VTYdTBO5zJGnUPpdmtkixXSQRAEwQTabc4hCIIgKIBwDkEQBMEEwjkEQRAEEwjnEARBEEwgnEMQBEEwgXAOQRAEwQTCOQRBEAQTCOcQBEEQTOB/WLs8jRRZ6g8AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tis = !ls res/*d.tif\n",
    "mosaic_Gtif(tis,out_fi='mos_082004d.tif')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tis = !ls res/*n.tif\n",
    "mosaic_Gtif(tis,out_fi='mos_082004n.tif')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This rough script should do the requested job. However, due testing, more elegant solutions and clean-up of the scattered intermediate files is pending.\n",
    "\n",
    "### Some comments on and discussion of the found solutions\n",
    "Although one task has been to download the full data archive, I had not sufficient resources at hand to do so. If one would like to really download the full repository, the https port is the only one available through scripting. The ftp server has been shut down. The respective *download_fi* function would need to be updated to be capable of longer autheification sessions. Alternatively, the earthengine api might be worth exploring.\n",
    "\n",
    "I chose python as the language I currently use most. In some cases simple bash scripting might have made things easier. However, through the python code (once copied to a proper module) transfer to an HPC should be rather straight forward (given that all required packages are available).\n",
    "\n",
    "Since MODIS is stored in hdf4 and since the files were not remotely accessible with the tools I tested, downloading the files and extracting the respective layers might not be the most elegant solution. With more time, I would try to batch-convert the hdf4 files to hdf5 and use more modern tools to access the data.\n",
    "\n",
    "As proposed, the code is exemplary. By defining year and month exploring the full MODIS data set should be just a matter of time and HD space. \n",
    "\n",
    "Possible gap filling should depend on the repective application. In some ways, interpolation might be a reasonable choice. In others a reference to the similar behaving locations and a kind of maxLik estimate might be more suitable. \n",
    "\n",
    "\n",
    "**Please note, this code is not intended for productive application.** Due testing and cleaning is pending. The code is intended as experimental and educational only. In case of questions, contact me: jackisch@kit.edu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
